/*
 * Requires:
 *     psiturk.js
 *     utils.js
 */

// Initalize psiturk object
var psiTurk = new PsiTurk(uniqueId, adServerLoc, mode);

var mycondition = condition;  // these two variables are passed by the psiturk server process
var mycounterbalance = counterbalance;  // they tell you which condition you have been assigned to
var final_numcorrect;
var practice_mode = true;

// All pages to be loaded
var pages = [
	"instructions/instruct-1.html",
	"instructions/instruct-2.html",
	"instructions/instruct-fail.html",
	"instructions/instruct-ready.html",
	"stage.html",
	"postquestionnaire.html"
];

psiTurk.preloadPages(pages);

var firstInstructionPages = [
	"instructions/instruct-1.html",
	"instructions/instruct-2.html",
];

var secondInstructionPages = [
	"instructions/instruct-ready.html"
];

var failInstructionPages = [
	"instructions/instruct-fail.html"
];


/********************
* HTML manipulation
*
* All HTML files in the templates directory are requested 
* from the server when the PsiTurk object is created above. We
* need code to get those pages from the PsiTurk object and 
* insert them into the document.
*
********************/

var WSCExperiment = function() {

	var questionon, // time from when question is presented to subject response
       NONE = 0,
       READSENTENCE = 1,
       READQANDANS = 2,
       FEEDBACK = 3,
       input_mode = NONE;

	// Winograd Schema questions
   //

   // practice
   // generated by make_questions.jl on 2015-02-13T09:10:22 with seed=838
   var practiceQuestions = [
      ["The bird flew too close to Tara, so it swerved.", "Who swerved?", "The Bird", "Tara", 0],
      ["The bird flew too close to Tara, so she ducked.", "Who ducked?", "Tara", "The Bird", 0],
      ["The children played with their games until they got tired of them.", "Who got tired of the games?", "The children", "The games", 0],
      ["The children played with their games until they got tired of them.", "What did the children get tired of?", "The children", "The games", 1],
      ["John went to bed because he was tired and it looked comfortable.", "What looked comfortable?", "The bed", "John", 0],
      ["John went to bed because he was tired and it looked comfortable.", "Who was tired?", "John", "The bed", 0],
      ["The toys were scattered across the floor. It was almost completely covered.", "What was covered?", "The toys", "The floor", 1],
      ["The toys were scattered across the floor. It was almost completely covered.", "What was covered?", "The toys", "The floor", 1],
      ["The predator stalked the prey. It didn't escape.", "What didn't escape?", "The prey", "The predator", 0],
      ["The predator stalked the prey. It didn't escape.", "What didn't escape?", "The predator", "The prey", 1],
      ["The drivers in several cars honked at the jaywalkers because they were mad at them.", "Who were mad?", "The drivers", "The jaywalkers", 0],
      ["The drivers in several cars honked at the jaywalkers because they were mad at them.", "Who were people mad at?", "The drivers", "The jaywalkers", 1],
      ["Barry gave his jacket to Shawn because he was very cold.", "Who was cold?", "Barry", "Shawn", 1],
      ["Barry gave his jacket to Shawn because he was very warm.", "Who was warm?", "Barry", "Shawn", 0],
      ["Sandy's room is filled with books in bookshelves. They are her favorites.", "Which are her favorites?", "The bookshelves", "The books", 1],
      ["Sandy's room is filled with books in bookshelves. They are anchored to the wall.", "Which are anchored to the wall?", "The books", "The bookshelves", 1],
   ];

   var r01 = function() {
      return Math.floor(Math.random()*2);
   }

   var practiceIndices = [ 0+r01(), 2+r01(), 4+r01(), 6+r01(),
                           8+r01(),10+r01(),12+r01(),14+r01() ];  // pick randomly between two versions/arms

   // test
   // generated by make_questions.jl on 2015-02-12T17:17:56 with seed=838
   var questions = [
      ["The city councilmen refused the demonstrators a permit because they feared violence.", "Who feared violence?", "The demonstrators", "The city councilmen", 1],
      ["The city councilmen refused the demonstrators a permit because they advocated violence.", "Who advocated violence?", "The city councilmen", "The demonstrators", 1],
      ["The trophy doesn't fit into the brown suitcase because it's too small.", "What is too small?", "The trophy", "The suitcase", 1],
      ["The trophy doesn't fit into the brown suitcase because it's too large.", "What is too large?", "The trophy", "The suitcase", 0],
      ["Joan made sure to thank Susan for all the help she had given.", "Who had given help?", "Joan", "Susan", 1],
      ["Joan made sure to thank Susan for all the help she had received.", "Who had received help?", "Joan", "Susan", 0],
      ["Paul tried to call George on the phone, but he wasn't successful.", "Who was not successful?", "George", "Paul", 1],
      ["Paul tried to call George on the phone, but he wasn't available.", "Who was not available?", "Paul", "George", 1],
   ];
   var allIndices = [
      [6,2,4,1],
      [6,5,0,3],
      [4,1,7,2],
      [5,7,0,3],
   ];

   var myIndices;
   var thequestions;
   if (practice_mode==true) {
      myIndices = practiceIndices;
	   myIndices = _.shuffle(myIndices);
      thequestions = practiceQuestions;
   } else {
      myIndices = allIndices[mycounterbalance];
      thequestions = questions;
   }

   var qnum = 0;
   var numcorrect = 0;

	var next = function() {
		if (myIndices.length===0) {
			finish();
		}
		else {
         qnum += 1;
         thisIndex = myIndices.shift();
			stim = thequestions[thisIndex];
			show_text(stim[0]);
         input_mode = READSENTENCE;
         d3.select("#instruct").html('<p id="prompt">Read the sentence(s) above. Press SPACE when you are done.</p>');
		}
	};
	
	var response_handler = function(e) {
		var keyCode = e.keyCode,
			response;

      if (input_mode == READSENTENCE) {
         if (keyCode==32) { // space
            input_mode = READQANDANS;
            show_question_ans(stim[1], stim[2], stim[3]);
            d3.select("#instruct").html('<p id="prompt">Answer by pressing (1) or (2) as quickly and accurately as you can.</p>');
			   questionon = new Date().getTime();
         }
      } else if (input_mode == READQANDANS) {
         switch (keyCode) {
            case 49: // 1
               response = 0;
               break;
            case 50: // 2
               response = 1;
               break;
            default:
               response = -1;
               break;
         }
         if (response>=0) {
            input_mode = FEEDBACK;
            var hit = response == stim[4];
            if (hit) {
               numcorrect += 1
            }
            var rt = new Date().getTime() - questionon;

            psiTurk.recordTrialData({'phase':practice_mode ? "PRACTICE":"TEST",
                                        'session':mycounterbalance,
                                        'qnum':qnum,
                                        'index':thisIndex,
                                        'response':response,
                                        'hit':hit,
                                        'rt':rt}
                                      );
            remove_text();
            remove_question_ans();
            show_feedback(hit, numcorrect, qnum);
            d3.select("#instruct").html('<p id="prompt">Press ENTER when you are ready to continue.</p>');
         }
      } else if (input_mode == FEEDBACK) {
         if (keyCode==13) { // enter
            input_mode = NONE;
            remove_feedback();
            next();
         }
      }
	};

	var finish = function() {
      if (practice_mode==true) {
         practice_mode = false;
	      $("body").unbind("keydown", response_handler); // Unbind keys
         var thresh = (practiceQuestions.length/2)*.7; // gotta be at least 70%
         console.log(thresh);
         if (numcorrect<thresh) {
            psiTurk.recordUnstructuredData("practice", "fail");
            psiTurk.doInstructions(
              failInstructionPages,
              function() { self.close(); } // ?? FIXME
            );
         } else {
            psiTurk.recordUnstructuredData("practice", "pass");
            psiTurk.doInstructions(
              secondInstructionPages,
              function() { currentview = new WSCExperiment(); }
            );
         }
      } else {
	      $("body").unbind("keydown", response_handler); // Unbind keys
         final_numcorrect = numcorrect;
	      currentview = new Questionnaire();
      }
	};
	
	var show_text = function(text) {
		d3.select("#stim")
			.append("div")
			.attr("id","sentence")
			.text(text);
	};

	var show_question_ans = function(question, ans1, ans2) {
		d3.select("#query")
			.append("div")
			.attr("id","question")
			.text(question);
		d3.select("#ans1")
			.append("div")
			.attr("id","answer1")
			.text("1.  " + ans1);
		d3.select("#ans2")
			.append("div")
			.attr("id","answer2")
			.text("2.  " + ans2);
	};

	var show_feedback = function(hit, numcorrect, qnum) {
      var feedback_text;
      if (hit) {
         feedback_text = "Correct.    (current score: " + numcorrect + "/" + qnum + ")";
      } else {
         feedback_text = "Incorrect.    (current score: " + numcorrect + "/" + qnum + ")";
      }
		d3.select("#query")
			.append("div")
			.attr("id","question")
			.text(feedback_text);
	};

	var remove_text = function() {
		d3.select("#sentence").remove();
	};

	var remove_question_ans = function() {
		d3.select("#question").remove();
		d3.select("#answer1").remove();
		d3.select("#answer2").remove();
	};

	var remove_feedback = function() {
		d3.select("#question").remove();
	};

	
	// Load the stage.html snippet into the body of the page
	psiTurk.showPage('stage.html');

	// Register the response handler that is defined above to handle any
	// key down events.
	$("body").focus().keydown(response_handler); 

	// Start the test
	next();
};


/****************
* Questionnaire *
****************/

var Questionnaire = function() {

	var error_message = "<h1>Oops!</h1><p>Something went wrong submitting your HIT. This might happen if you lose your internet connection. Press the button to resubmit.</p><button id='resubmit'>Resubmit</button>";

	record_responses = function() {

		psiTurk.recordTrialData({'phase':'postquestionnaire', 'status':'submit'});

		$('textarea').each( function(i, val) {
			psiTurk.recordUnstructuredData(this.id, this.value);
		});
		$('select').each( function(i, val) {
			psiTurk.recordUnstructuredData(this.id, this.value);		
		});

	};

	prompt_resubmit = function() {
		replaceBody(error_message);
		$("#resubmit").click(resubmit);
	};

	resubmit = function() {
		replaceBody("<h1>Trying to resubmit...</h1>");
		reprompt = setTimeout(prompt_resubmit, 10000);
		
		psiTurk.saveData({
			success: function() {
			    clearInterval(reprompt); 
                psiTurk.computeBonus('compute_bonus', function(){finish()}); 
			}, 
			error: prompt_resubmit
		});
	};

	// Load the questionnaire snippet 
	psiTurk.showPage('postquestionnaire.html');
   var payment = final_numcorrect / 40.0 * 1.00;
   var paytext = "In addition, because you got " + final_numcorrect + " answers correct (out of 40), you will also receive a bonus of $" + payment.toFixed(2) + ".";
   $("#ques_paytext").html(paytext);
	psiTurk.recordTrialData({'phase':'postquestionnaire', 'status':'begin'});
   psiTurk.recordUnstructuredData("bonus_payment", payment.toFixed(2));		
	
	$("#next").click(function () {
	    record_responses();
	    psiTurk.saveData({
            success: function(){
                psiTurk.computeBonus('compute_bonus', function() { 
                	psiTurk.completeHIT(); // when finished saving compute bonus, the quit
                }); 
            }, 
            error: prompt_resubmit});
	});
    
	
};

// Task object to keep track of the current phase
var currentview;

/*******************
 * Run Task
 ******************/
$(window).load( function(){
    psiTurk.doInstructions(
    	firstInstructionPages, // a list of pages you want to display in sequence
    	function() { currentview = new WSCExperiment(); } // what you want to do when you are done with instructions
    );
});
